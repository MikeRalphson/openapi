{
  "swagger": "2.0",
  "info": {
    "title": "3blades API",
    "version": "0.2.0",
    "description": "# Introduction\n\n3Blades currently offers a HTTP REST API and a Websocket Stream API which are used by both the Web UI and the CLI. This API documentation contains all API operations currently supported in the platform and provides examples of how to execute them using our Command Line Interface (CLI), Python SDK and Go SDK.\n\n# Authentication\n\nIn order to be able to make requests to the 3Blades API, you should first obtain an JWT (API authentication token) for your account. You many obtain a valid JWT by authenticating to the RESTful authentication endpoint with a valid user id and password.\n\n# RESTful API\n\nThe 3Blades REST API is reachable through the following hostname:\n\nhttps://api.3blades.io/v1\n\nAll requests should be sent to this endpoint using basic authentication using a valid authentication token.\n\n## Namespaced Endpoints\n\nEndpoints that are labeled as `namespaced` allow users to operate over different account/projects, for example a over a specific user project. The namespace includes the user or team account + project name, since it is possible for two accounts to have a project with the same name. A namespace therefore identifies the full project path.\n\nExample:\n\nThe user `foo` wants to manage a file within a specific project. They can use either of the following urls: https://api.3blades.io/v1/foo/my-proyect/my-file.\n\n## Namespaced Endpoints in the 3Blades CLI\n\nIf you are using namespaces with the 3Blades CLI, set them by changing the value of the TBS_NAMESPACE environment variable. In `*nix` environments you can `eval $(tbs env --namespace foo/myproject)` into your namespace. For more information please view [CLI Tools README](https://github.com/3blades/cli-tools).\n\n# Stream API\n\nThe 3Blades Stream API is reachable through the following hostname:\n\n  wss://ws.api.3blades.io/\n\nThe Stream API requires the same authentication mechanism as the REST API.\n"
  },
  "host": "staging.3blades.io",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "multipart/form-data"
  ],
  "produces": [
    "application/json",
    "text/html"
  ],
  "paths": {
    "/actions/": {
      "get": {
        "operationId": "actions_list",
        "responses": {
          "200": {
            "description": "Action list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit actions.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offest items when retrieving actions.",
            "type": "string"
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Set state when retrieving actions.",
            "type": "string"
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "Start date and time when retrieving actions.",
            "type": "string"
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "End date and time when retrieving actions.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Oder items when retrieving actions.",
            "type": "string"
          }
        ],
        "tags": [
          "actions"
        ]
      }
    },
    "/actions/{id}/cancel/": {
      "post": {
        "operationId": "actions_cancel_create",
        "responses": {
          "201": {
            "description": "Cancel action."
          },
          "400": {
            "description": "Invalid action id supplied."
          }
        },
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Action unique identifier.",
            "type": "string"
          }
        ],
        "description": "Cancel an action object by ID.",
        "tags": [
          "actions"
        ]
      }
    },
    "/auth/jwt-token-auth/": {
      "post": {
        "operationId": "auth_jwt-token-auth_create",
        "responses": {
          "201": {
            "description": "JWT created",
            "schema": {
              "$ref": "#/definitions/JWT"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/JWTError"
            }
          }
        },
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JWTData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/jwt-token-refresh/": {
      "post": {
        "operationId": "auth_jwt-token-refresh_create",
        "responses": {
          "201": {
            "description": "RefreshJSONWebToken created",
            "schema": {
              "$ref": "#/definitions/RefreshJSONWebToken"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/RefreshJSONWebTokenError"
            }
          }
        },
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RefreshJSONWebTokenData"
            }
          }
        ],
        "description": "API View that returns a refreshed token (with new expiration) based on\nexisting token\n\nIf 'orig_iat' field (original issued-at-time) is found, will first check\nif it's within expiration window, then copy it to the new token.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/jwt-token-verify/": {
      "post": {
        "operationId": "auth_jwt-token-verify_create",
        "responses": {
          "201": {
            "description": "VerifyJSONWebToken created",
            "schema": {
              "$ref": "#/definitions/VerifyJSONWebToken"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/VerifyJSONWebTokenError"
            }
          }
        },
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VerifyJSONWebTokenData"
            }
          }
        ],
        "description": "API View that checks the veracity of a token, returning the token if it\nis valid.",
        "summary": "API View that checks the veracity of a token, returning the token if it",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/register/": {
      "post": {
        "operationId": "auth_register_create",
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/UserError"
            }
          }
        },
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                  "type": "string"
                },
                "email": {
                  "description": "User email.",
                  "type": "string"
                },
                "first_name": {
                  "description": "User first name.",
                  "type": "string"
                },
                "last_name": {
                  "description": "User last name.",
                  "type": "string"
                },
                "password": {
                  "description": "User password.",
                  "type": "string"
                },
                "profile": {
                  "$ref": "#/definitions/UserProfile"
                }
              },
              "required": [
                "username",
                "password",
                "profile"
              ]
            }
          }
        ],
        "description": "User register",
        "summary": "User register",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/simple-token-auth/": {
      "post": {
        "operationId": "auth_simple-token-auth_create",
        "responses": {
          "201": {
            "description": "AuthToken created",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/AuthTokenError"
            }
          }
        },
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "description": "User's username.",
                  "type": "string"
                },
                "password": {
                  "description": "User's password.",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/{namespace}/billing/cards/": {
      "get": {
        "operationId": "billing_cards_list",
        "responses": {
          "200": {
            "description": "Card list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Set limit when retrieving credit or debit cards.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Set offset when retriving cards.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Order when retrieving cards.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "post": {
        "operationId": "billing_cards_create",
        "responses": {
          "201": {
            "description": "Card created",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CardError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CardData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/cards/{id}/": {
      "get": {
        "operationId": "billing_cards_read",
        "responses": {
          "200": {
            "description": "Card retrieved.",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "404": {
            "description": "Card not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "put": {
        "operationId": "billing_cards_update",
        "responses": {
          "200": {
            "description": "Card updated",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CardError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CardData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "patch": {
        "operationId": "billing_cards_partial_update",
        "responses": {
          "200": {
            "description": "Card updated",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CardUpdateError"
            }
          },
          "404": {
            "description": "Card not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Card unique identifier.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CardData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "delete": {
        "operationId": "billing_cards_delete",
        "responses": {
          "204": {
            "description": "Card deleted"
          },
          "404": {
            "description": "Card not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/customers/": {
      "get": {
        "operationId": "billing_customers_list",
        "responses": {
          "200": {
            "description": "Customer list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit for getting list of items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "post": {
        "operationId": "billing_customers_create",
        "responses": {
          "201": {
            "description": "Customer created",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CustomerError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerData",
              "required": [
                "user"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/customers/{id}/": {
      "get": {
        "operationId": "billing_customers_read",
        "responses": {
          "200": {
            "description": "Customer retrieved.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Customer not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Customer unique identifier.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "put": {
        "operationId": "billing_customers_update",
        "responses": {
          "200": {
            "description": "Customer updated",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CustomerError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Customer unique identifier.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerData",
              "required": [
                "user"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "patch": {
        "operationId": "billing_customers_partial_update",
        "responses": {
          "200": {
            "description": "Customer updated",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CustomerError"
            }
          },
          "404": {
            "description": "Customer not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "delete": {
        "operationId": "billing_customers_delete",
        "responses": {
          "204": {
            "description": "Customer deleted"
          },
          "404": {
            "description": "Customer not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Customer unique identifier.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/invoices/": {
      "get": {
        "operationId": "billing_invoices_list",
        "responses": {
          "200": {
            "description": "Invoice list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoice"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limite when getting items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/invoices/{id}/": {
      "get": {
        "operationId": "billing_invoices_read",
        "responses": {
          "200": {
            "description": "Invoice retrieved.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "404": {
            "description": "Invoice not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Invoice unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/plans/": {
      "get": {
        "operationId": "billing_plans_list",
        "responses": {
          "200": {
            "description": "Plan list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plan"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when getting items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "post": {
        "operationId": "billing_plans_create",
        "responses": {
          "201": {
            "description": "Plan created",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/PlanError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PlanData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/plans/{id}/": {
      "get": {
        "operationId": "billing_plans_read",
        "responses": {
          "200": {
            "description": "Plan retrieved",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "404": {
            "description": "Plan not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "put": {
        "operationId": "billing_plans_update",
        "responses": {
          "200": {
            "description": "Plan updated.",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/PlanError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PlanData",
              "required": [
                "amount",
                "interval",
                "interval_count",
                "name"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "patch": {
        "operationId": "billing_plans_partial_update",
        "responses": {
          "200": {
            "description": "Plan updated",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/PlanError"
            }
          },
          "404": {
            "description": "Plan not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PlanData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "delete": {
        "operationId": "billing_plans_delete",
        "responses": {
          "204": {
            "description": "Plan deleted"
          },
          "404": {
            "description": "Plan not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/subscription_required/": {
      "get": {
        "operationId": "billing_subscription_required_list",
        "responses": {
          "200": {
            "description": "No Subscription."
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "post": {
        "operationId": "billing_subscription_required_create",
        "responses": {
          "201": {
            "description": "No Subscription."
          },
          "400": {
            "description": "Invalid data supplied."
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/subscriptions/": {
      "get": {
        "operationId": "billing_subscriptions_list",
        "responses": {
          "200": {
            "description": "Subscription list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when getting items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "post": {
        "operationId": "billing_subscriptions_create",
        "responses": {
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/SubscriptionError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionData",
              "required": [
                "plan"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/billing/subscriptions/{id}/": {
      "get": {
        "operationId": "billing_subscriptions_read",
        "responses": {
          "200": {
            "description": "Subscription retrieved.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "404": {
            "description": "Subscription not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      },
      "put": {
        "operationId": "billing_subscriptions_update",
        "responses": {
          "200": {
            "description": "Subscription updated.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/SubscriptionError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionData",
              "required": [
                "plan"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "patch": {
        "operationId": "billing_subscriptions_partial_update",
        "responses": {
          "200": {
            "description": "Subscription updated.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/SubscriptionError"
            }
          },
          "404": {
            "description": "Subscription not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "billing"
        ]
      },
      "delete": {
        "operationId": "billing_subscriptions_delete",
        "responses": {
          "204": {
            "description": "Subscription deleted."
          },
          "404": {
            "description": "Subscription not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "billing"
        ]
      }
    },
    "/{namespace}/hosts/": {
      "get": {
        "operationId": "hosts_list",
        "responses": {
          "200": {
            "description": "DockerHost list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DockerHost"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team data.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limite when getting items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting items.",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Name, when getting items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "hosts"
        ]
      },
      "post": {
        "operationId": "hosts_create",
        "responses": {
          "201": {
            "description": "DockerHost created successfully.",
            "schema": {
              "$ref": "#/definitions/DockerHost"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/DockerHostError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DockerHostData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "hosts"
        ]
      }
    },
    "/{namespace}/hosts/{id}/": {
      "get": {
        "operationId": "hosts_read",
        "responses": {
          "200": {
            "description": "DockerHost retrieved.",
            "schema": {
              "$ref": "#/definitions/DockerHost"
            }
          },
          "404": {
            "description": "DockerHost not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "hosts"
        ]
      },
      "put": {
        "operationId": "hosts_update",
        "responses": {
          "200": {
            "description": "DockerHost updated.",
            "schema": {
              "$ref": "#/definitions/DockerHost"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/DockerHostError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DockerHostData",
              "required": [
                "name",
                "ip"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "hosts"
        ]
      },
      "patch": {
        "operationId": "hosts_partial_update",
        "responses": {
          "200": {
            "description": "DockerHost updated",
            "schema": {
              "$ref": "#/definitions/DockerHost"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/DockerHostError"
            }
          },
          "404": {
            "description": "DockerHost not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DockerHostData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "hosts"
        ]
      },
      "delete": {
        "operationId": "hosts_delete",
        "responses": {
          "204": {
            "description": "DockerHost deleted."
          },
          "404": {
            "description": "DockerHost not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "DockerHost unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "hosts"
        ]
      }
    },
    "/{namespace}/projects/": {
      "get": {
        "operationId": "projects_list",
        "responses": {
          "200": {
            "description": "Project list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when getting data.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting data.",
            "type": "string"
          },
          {
            "name": "private",
            "required": false,
            "in": "query",
            "description": "Private project or public project.",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Project name.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting projects.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_create",
        "responses": {
          "201": {
            "description": "Project created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/ProjectError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{id}/": {
      "get": {
        "operationId": "projects_read",
        "responses": {
          "200": {
            "description": "Project retrieved.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Project not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_update",
        "responses": {
          "200": {
            "description": "Project updated.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team namespace.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectData",
              "required": [
                "name"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_partial_update",
        "responses": {
          "200": {
            "description": "Project updated",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/ProjectError"
            }
          },
          "404": {
            "description": "Project not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_delete",
        "responses": {
          "204": {
            "description": "Project deleted."
          },
          "404": {
            "description": "Project not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/collaborators/": {
      "get": {
        "operationId": "projects_collaborators_list",
        "responses": {
          "200": {
            "description": "Collaborator list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collaborator"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when retrieving items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when retrieving items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when retrieving items.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_collaborators_create",
        "responses": {
          "201": {
            "description": "Collaborator created.",
            "schema": {
              "$ref": "#/definitions/Collaborator"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/CollaboratorError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CollaboratorData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/collaborators/{id}/": {
      "get": {
        "operationId": "projects_collaborators_read",
        "responses": {
          "200": {
            "description": "Collaborator retrieved.",
            "schema": {
              "$ref": "#/definitions/Collaborator"
            }
          },
          "404": {
            "description": "Collaborator not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Collaborator unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_collaborators_update",
        "responses": {
          "200": {
            "description": "Collaborator updated",
            "schema": {
              "$ref": "#/definitions/Collaborator"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CollaboratorError"
            }
          },
          "404": {
            "description": "Collaborator not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Collaborator unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CollaboratorData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_collaborators_partial_update",
        "responses": {
          "200": {
            "description": "Collaborator updated",
            "schema": {
              "$ref": "#/definitions/Collaborator"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/CollaboratorError"
            }
          },
          "404": {
            "description": "Collaborator not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CollaboratorError"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_collaborators_delete",
        "responses": {
          "204": {
            "description": "Collaborator deleted."
          },
          "404": {
            "description": "Collaborator not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Collaborator unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/project_files/": {
      "get": {
        "operationId": "projects_project_files_list",
        "responses": {
          "200": {
            "description": "ProjectFile list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectFile"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Unique identifier for project file expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when getting project file list.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting project file list.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering of list values when getting project file list.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_project_files_create",
        "summary": "Uploads a file.",
        "responses": {
          "201": {
            "description": "ProjectFile created",
            "schema": {
              "$ref": "#/definitions/ProjectFile"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/ProjectFileError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Unique project identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "project",
            "required": true,
            "in": "formData",
            "description": "Project name.",
            "type": "string"
          },
          {
            "name": "file",
            "required": true,
            "in": "formData",
            "description": "File to send, to create new file.",
            "type": "file"
          },
          {
            "name": "public",
            "required": false,
            "in": "formData",
            "description": "Is project file public or private.",
            "type": "boolean"
          },
          {
            "name": "base64_data",
            "required": false,
            "in": "formData",
            "description": "Fila data, represented as base64.",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "formData",
            "description": "File name.",
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/project_files/{id}/": {
      "get": {
        "operationId": "projects_project_files_read",
        "responses": {
          "200": {
            "description": "ProjectFile retrieved",
            "schema": {
              "$ref": "#/definitions/ProjectFile"
            }
          },
          "404": {
            "description": "ProjectFile not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifer expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_project_files_update",
        "responses": {
          "200": {
            "description": "ProjectFile updated",
            "schema": {
              "$ref": "#/definitions/ProjectFile"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ProjectFileError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifer expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project file identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project",
            "required": true,
            "in": "formData",
            "description": "Project name.",
            "type": "string"
          },
          {
            "name": "file",
            "required": true,
            "in": "formData",
            "description": "File to update.",
            "type": "file"
          },
          {
            "name": "public",
            "required": false,
            "in": "formData",
            "description": "Is project public or private.",
            "type": "boolean"
          },
          {
            "name": "base64_data",
            "required": false,
            "in": "formData",
            "description": "File contents as base64.",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "formData",
            "description": "File name.",
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_project_files_partial_update",
        "responses": {
          "200": {
            "description": "ProjectFile updated.",
            "schema": {
              "$ref": "#/definitions/ProjectFile"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ProjectFileError"
            }
          },
          "404": {
            "description": "ProjectFile not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project",
            "required": false,
            "in": "formData",
            "description": "Project name.",
            "type": "string"
          },
          {
            "name": "file",
            "required": false,
            "in": "formData",
            "description": "File to patch.",
            "type": "file"
          },
          {
            "name": "public",
            "required": false,
            "in": "formData",
            "description": "Is project file public or private.",
            "type": "boolean"
          },
          {
            "name": "base64_data",
            "required": false,
            "in": "formData",
            "description": "File encoded as base64.",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "formData",
            "description": "File name.",
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_project_files_delete",
        "responses": {
          "204": {
            "description": "ProjectFile deleted"
          },
          "404": {
            "description": "ProjectFile not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/": {
      "get": {
        "operationId": "projects_servers_list",
        "responses": {
          "200": {
            "description": "Server list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Server"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit results when getting server list.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset results when getting server list.",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Server name.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering option when getting server list.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_servers_create",
        "responses": {
          "201": {
            "description": "Server created.",
            "schema": {
              "$ref": "#/definitions/Server"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifer expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerData",
              "required": [
                "name"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{id}/": {
      "get": {
        "operationId": "projects_servers_read",
        "responses": {
          "200": {
            "description": "Server retrieved.",
            "schema": {
              "$ref": "#/definitions/Server"
            }
          },
          "404": {
            "description": "Server not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_servers_update",
        "responses": {
          "200": {
            "description": "Server updated.",
            "schema": {
              "$ref": "#/definitions/Server"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerData",
              "required": [
                "name"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_servers_partial_update",
        "responses": {
          "200": {
            "description": "Server updated",
            "schema": {
              "$ref": "#/definitions/Server"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "type": "object",
              "properties": {
                "non_field_errors": {
                  "type": "array",
                  "description": "Errors not connected to any field",
                  "items": {
                    "type": "string"
                  }
                },
                "id": {
                  "type": "array",
                  "description": "id field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "array",
                  "description": "name field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "created_at": {
                  "type": "array",
                  "description": "created_at field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "image_name": {
                  "type": "array",
                  "description": "image_name field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "environment_resources": {
                  "type": "array",
                  "description": "environment_resources field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "startup_script": {
                  "type": "array",
                  "description": "startup_script field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "config": {
                  "type": "array",
                  "description": "config field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "status": {
                  "type": "array",
                  "description": "status field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "connected": {
                  "type": "array",
                  "description": "connected field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "host": {
                  "type": "array",
                  "description": "host field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "endpoint": {
                  "type": "array",
                  "description": "endpoint field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "logs_url": {
                  "type": "array",
                  "description": "logs_url field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "status_url": {
                  "type": "array",
                  "description": "status_url field errors",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Server not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "",
                  "type": "string"
                },
                "image_name": {
                  "description": "",
                  "type": "string"
                },
                "environment_resources": {
                  "description": "",
                  "type": "string"
                },
                "startup_script": {
                  "description": "",
                  "type": "string"
                },
                "config": {
                  "description": "",
                  "type": "object"
                },
                "connected": {
                  "description": "",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "host": {
                  "description": "",
                  "type": "string"
                }
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_servers_delete",
        "responses": {
          "204": {
            "description": "Server deleted"
          },
          "404": {
            "description": "Server not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{id}/is-allowed/": {
      "get": {
        "operationId": "projects_servers_is-allowed_list",
        "responses": {
          "200": {
            "description": "Is Allowed"
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Projedct unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "description": "Checks if user is allowed to access model server",
        "summary": "Checks if user is allowed to access model server",
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{id}/start/": {
      "post": {
        "operationId": "projects_servers_start_create",
        "responses": {
          "201": {
            "description": "Server started."
          },
          "400": {
            "description": "Invalid data supplied."
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{id}/stop/": {
      "post": {
        "operationId": "projects_servers_stop_create",
        "responses": {
          "201": {
            "description": "Server stopped."
          },
          "400": {
            "description": "Invalid data supplied."
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{id}/terminate/": {
      "post": {
        "operationId": "projects_servers_terminate_create",
        "responses": {
          "201": {
            "description": "Sercer terminated."
          },
          "400": {
            "description": "Invalid data supplied."
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/": {
      "get": {
        "operationId": "projects_servers_run-stats_list",
        "responses": {
          "200": {
            "description": "ServerRunStatistics list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerRunStatistics"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items retrieved.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset items retrieved.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Order retrieved items.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_servers_run-stats_create",
        "responses": {
          "201": {
            "description": "ServerRunStatistics created.",
            "schema": {
              "$ref": "#/definitions/ServerRunStatistics"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "type": "object",
              "properties": {
                "non_field_errors": {
                  "type": "array",
                  "description": "Errors not connected to any field.",
                  "items": {
                    "type": "string"
                  }
                },
                "id": {
                  "type": "array",
                  "description": "Id field errors.",
                  "items": {
                    "type": "string"
                  }
                },
                "start": {
                  "type": "array",
                  "description": "Start field errors.",
                  "items": {
                    "type": "string"
                  }
                },
                "stop": {
                  "type": "array",
                  "description": "Stop field errors.",
                  "items": {
                    "type": "string"
                  }
                },
                "exit_code": {
                  "type": "array",
                  "description": "exit_code field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "size": {
                  "type": "array",
                  "description": "size field errors",
                  "items": {
                    "type": "string"
                  }
                },
                "stacktrace": {
                  "type": "array",
                  "description": "stacktrace field errors",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "start": {
                  "description": "",
                  "type": "string"
                },
                "stop": {
                  "description": "",
                  "type": "string"
                },
                "exit_code": {
                  "description": "",
                  "type": "integer"
                },
                "size": {
                  "description": "",
                  "type": "integer"
                },
                "stacktrace": {
                  "description": "",
                  "type": "string"
                }
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/{id}/": {
      "get": {
        "operationId": "projects_servers_run-stats_read",
        "responses": {
          "200": {
            "description": "ServerRunStatistics retrieved",
            "schema": {
              "$ref": "#/definitions/ServerRunStatistics"
            }
          },
          "404": {
            "description": "ServerRunStatistics not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_servers_run-stats_update",
        "responses": {
          "200": {
            "description": "ServerRunStatistics updated.",
            "schema": {
              "$ref": "#/definitions/ServerRunStatistics"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ServerRunStatisticsError"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server run statistics expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerRunStatisticsData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_servers_run-stats_partial_update",
        "responses": {
          "200": {
            "description": "ServerRunStatistics updated.",
            "schema": {
              "$ref": "#/definitions/ServerRunStatistics"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ServerRunStatisticsError"
            }
          },
          "404": {
            "description": "ServerRunStatistics not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server run statistics unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerRunStatisticsData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_servers_run-stats_delete",
        "responses": {
          "204": {
            "description": "ServerRunStatistics deleted"
          },
          "404": {
            "description": "ServerRunStatistics not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server run statistics unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/": {
      "get": {
        "operationId": "projects_servers_ssh-tunnels_list",
        "responses": {
          "200": {
            "description": "SshTunnel list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SshTunnel"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Sercer unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit retrieved items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset retrieved items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Order retrieved items.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_servers_ssh-tunnels_create",
        "responses": {
          "201": {
            "description": "SSH Tunnel created.",
            "schema": {
              "$ref": "#/definitions/SshTunnel"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/SshTunnelError"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SshTunnelData",
              "required": [
                "name",
                "host",
                "local_port",
                "remote_port",
                "endpoint",
                "username"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/{id}/": {
      "get": {
        "operationId": "projects_servers_ssh-tunnels_read",
        "responses": {
          "200": {
            "description": "SSH Tunnel retrieved.",
            "schema": {
              "$ref": "#/definitions/SshTunnel"
            }
          },
          "404": {
            "description": "SSH Tunnel not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "SSH tunnel unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_servers_ssh-tunnels_update",
        "responses": {
          "200": {
            "description": "SshTunnel updated",
            "schema": {
              "$ref": "#/definitions/SshTunnel"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/SshTunnelError"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "SSH tunnel unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SshTunnelData",
              "required": [
                "name",
                "host",
                "local_port",
                "remote_port",
                "endpoint",
                "username"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_servers_ssh-tunnels_partial_update",
        "responses": {
          "200": {
            "description": " SSH Tunnel updated.",
            "schema": {
              "$ref": "#/definitions/SshTunnel"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/SshTunnelError"
            }
          },
          "404": {
            "description": "SSH tunnel not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SshTunnelData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_servers_ssh-tunnels_delete",
        "responses": {
          "204": {
            "description": "SSH tunnel deleted."
          },
          "404": {
            "description": "SSH tunnel not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Sercer unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "SSH tunnel unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/": {
      "get": {
        "operationId": "projects_servers_stats_list",
        "responses": {
          "200": {
            "description": "ServerStatistics list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerStatistics"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit items when retrieving data.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset items when retrieving items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Order when retrieving items.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_servers_stats_create",
        "responses": {
          "201": {
            "description": "ServerStatistics created",
            "schema": {
              "$ref": "#/definitions/ServerStatistics"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/ServerStatisticsError"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerStatisticsData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/{id}/": {
      "get": {
        "operationId": "projects_servers_stats_read",
        "responses": {
          "200": {
            "description": "ServerStatistics retrieved",
            "schema": {
              "$ref": "#/definitions/ServerStatistics"
            }
          },
          "404": {
            "description": "ServerStatistics not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Sercer statistics unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "projects_servers_stats_update",
        "responses": {
          "200": {
            "description": "ServerStatistics updated",
            "schema": {
              "$ref": "#/definitions/ServerStatistics"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ServerStatisticsError"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server statistics unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerStatisticsData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "projects_servers_stats_partial_update",
        "responses": {
          "200": {
            "description": "ServerStatistics updated.",
            "schema": {
              "$ref": "#/definitions/ServerStatistics"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/ServerStatisticsError"
            }
          },
          "404": {
            "description": "ServerStatistics not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Server statistics unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerStatisticsData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "projects_servers_stats_delete",
        "responses": {
          "204": {
            "description": "ServerStatistics deleted."
          },
          "404": {
            "description": "ServerStatistics not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Stats unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/projects/{project_pk}/synced-resources/": {
      "get": {
        "operationId": "projects_synced-resources_list",
        "responses": {
          "200": {
            "description": "Synced resource list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncedResource"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when getting items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "projects_synced-resources_create",
        "responses": {
          "201": {
            "description": "SyncedResource created.",
            "schema": {
              "$ref": "#/definitions/SyncedResource"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/SyncedResourceError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_pk",
            "required": true,
            "in": "path",
            "description": "Project unique identifier.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SyncedResourceData",
              "required": [
                "folder",
                "provider"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/{namespace}/search/": {
      "get": {
        "operationId": "search_list",
        "responses": {
          "200": {
            "description": "Search list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Search"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit data when getting items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset data when getting items.",
            "type": "string"
          }
        ],
        "tags": [
          "search"
        ]
      }
    },
    "/{namespace}/servers/options/resources/": {
      "get": {
        "operationId": "servers_options_resources_list",
        "responses": {
          "200": {
            "description": "Environment resource list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Set limit when retrieving items.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when retrieving items.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Set order when retrieving items.",
            "type": "string"
          }
        ],
        "tags": [
          "servers"
        ]
      },
      "post": {
        "operationId": "servers_options_resources_create",
        "responses": {
          "201": {
            "description": "EnvironmentResource created",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceData",
              "required": [
                "name",
                "cpu",
                "memory"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "servers"
        ]
      }
    },
    "/{namespace}/servers/options/resources/{id}/": {
      "get": {
        "operationId": "servers_options_resources_read",
        "responses": {
          "200": {
            "description": "Environment resource retrieved.",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "404": {
            "description": "Environment resource not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Resource unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "servers"
        ]
      },
      "put": {
        "operationId": "servers_options_resources_update",
        "responses": {
          "200": {
            "description": "EnvironmentResource updated",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceError"
            }
          },
          "404": {
            "description": "EnvironmentResource not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Environment resource unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceData",
              "required": [
                "name",
                "cpu",
                "memory"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "servers"
        ]
      },
      "patch": {
        "operationId": "servers_options_resources_partial_update",
        "responses": {
          "200": {
            "description": "Environment resource updated.",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceError"
            }
          },
          "404": {
            "description": "Environment resource not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Environment resource unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EnvironmentResourceData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "servers"
        ]
      },
      "delete": {
        "operationId": "servers_options_resources_delete",
        "responses": {
          "204": {
            "description": "EnvironmentResource deleted."
          },
          "404": {
            "description": "EnvironmentResource not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Environment resource unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "servers"
        ]
      }
    },
    "/{namespace}/service/{server_pk}/trigger/": {
      "get": {
        "operationId": "service_trigger_list",
        "responses": {
          "200": {
            "description": "ServerAction list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerAction"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit when getting triggers.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting triggers.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting triggers.",
            "type": "string"
          }
        ],
        "tags": [
          "service"
        ]
      },
      "post": {
        "operationId": "service_trigger_create",
        "responses": {
          "201": {
            "description": "Server action created.",
            "schema": {
              "$ref": "#/definitions/ServerAction"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/ServerActionError"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerActionData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/{namespace}/service/{server_pk}/trigger/{id}/": {
      "get": {
        "operationId": "service_trigger_read",
        "responses": {
          "200": {
            "description": "Server action retrieved.",
            "schema": {
              "$ref": "#/definitions/ServerAction"
            }
          },
          "404": {
            "description": "ServerAction not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "service"
        ]
      },
      "put": {
        "operationId": "service_trigger_update",
        "responses": {
          "200": {
            "description": "ServerAction updated.",
            "schema": {
              "$ref": "#/definitions/ServerAction"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/TriggerError"
            }
          },
          "404": {
            "description": "Server action not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerActionData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "service"
        ]
      },
      "patch": {
        "operationId": "service_trigger_partial_update",
        "responses": {
          "200": {
            "description": "Server action updated.",
            "schema": {
              "$ref": "#/definitions/ServerAction"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/ServerActionError"
            }
          },
          "404": {
            "description": "Server action not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServerActionData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "service"
        ]
      },
      "delete": {
        "operationId": "service_trigger_delete",
        "responses": {
          "204": {
            "description": "ServerAction deleted"
          },
          "404": {
            "description": "ServerAction not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/{namespace}/service/{server_pk}/trigger/{id}/call/": {
      "post": {
        "operationId": "service_trigger_call_create",
        "responses": {
          "201": {
            "description": "Call Trigger"
          },
          "400": {
            "description": "Invalid data supplied"
          }
        },
        "parameters": [
          {
            "name": "server_pk",
            "required": true,
            "in": "path",
            "description": "Server identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "service"
        ]
      }
    },
    "/{namespace}/triggers/": {
      "get": {
        "operationId": "triggers_list",
        "responses": {
          "200": {
            "description": "Trigger list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trigger"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit values returned.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset list of values returned.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Order list of values returned.",
            "type": "string"
          }
        ],
        "tags": [
          "triggers"
        ]
      },
      "post": {
        "operationId": "triggers_create",
        "responses": {
          "201": {
            "description": "Trigger created",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/TriggerError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TriggerData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "triggers"
        ]
      }
    },
    "/{namespace}/triggers/{id}/": {
      "get": {
        "operationId": "triggers_read",
        "responses": {
          "200": {
            "description": "Trigger retrieved",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "404": {
            "description": "Trigger not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "triggers"
        ]
      },
      "put": {
        "operationId": "triggers_update",
        "responses": {
          "200": {
            "description": "Trigger updated.",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/TriggerError"
            }
          },
          "404": {
            "description": "Trigger not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "description": "Trigger action data.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TriggerData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "triggers"
        ]
      },
      "patch": {
        "operationId": "triggers_partial_update",
        "responses": {
          "200": {
            "description": "Trigger updated",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/TriggerError"
            }
          },
          "404": {
            "description": "Trigger not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger ",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TriggerData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "triggers"
        ]
      },
      "delete": {
        "operationId": "triggers_delete",
        "responses": {
          "204": {
            "description": "Trigger deleted."
          },
          "404": {
            "description": "Trigger not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Trigger unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "triggers"
        ]
      }
    },
    "/{namespace}/users/": {
      "get": {
        "operationId": "users_list",
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit user list.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting users.",
            "type": "string"
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "User username.",
            "type": "string"
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "User email.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting users.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "users_create",
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/UserError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserData",
              "required": [
                "username",
                "password",
                "profile"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{id}/": {
      "get": {
        "operationId": "users_read",
        "responses": {
          "200": {
            "description": "User retrieved.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "users_update",
        "responses": {
          "200": {
            "description": "User updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/UserError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserData",
              "required": [
                "username",
                "password",
                "profile"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "users_partial_update",
        "responses": {
          "200": {
            "description": "User updated.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/UserError"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "users_delete",
        "responses": {
          "204": {
            "description": "User deleted."
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/api-key/": {
      "get": {
        "operationId": "users_api-key_list",
        "responses": {
          "200": {
            "description": "Api Key"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/api-key/reset/": {
      "post": {
        "operationId": "users_api-key_reset_create",
        "responses": {
          "201": {
            "description": "Reset Api Key"
          },
          "400": {
            "description": "Invalid data supplied"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/emails/": {
      "get": {
        "operationId": "users_emails_list",
        "responses": {
          "200": {
            "description": "Email list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Email"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier as expressed as UUID.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limite when getting email list.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting email list.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering when getting email list.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "users_emails_create",
        "responses": {
          "201": {
            "description": "Email created",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/EmailError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailData",
              "required": [
                "address"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/emails/{address}/": {
      "get": {
        "operationId": "users_emails_read",
        "responses": {
          "200": {
            "description": "Email retrieved",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "404": {
            "description": "Email not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Email address.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "users_emails_update",
        "responses": {
          "200": {
            "description": "Email updated",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/EmailError"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Email address.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailData",
              "required": [
                "address"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "users_emails_partial_update",
        "responses": {
          "200": {
            "description": "Email updated",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/EmailError"
            }
          },
          "404": {
            "description": "Email not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Email address.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "users_emails_delete",
        "responses": {
          "204": {
            "description": "Email deleted."
          },
          "404": {
            "description": "Email not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Email address.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/integrations/": {
      "get": {
        "operationId": "users_integrations_list",
        "responses": {
          "200": {
            "description": "Integration list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Integration"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of integrations.",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset when getting integrations list.",
            "type": "string"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Ordering of integrations when getting integrations list.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "users_integrations_create",
        "responses": {
          "201": {
            "description": "Integration created",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/IntegrationError"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IntegrationData",
              "required": [
                "provider"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/integrations/{id}/": {
      "get": {
        "operationId": "users_integrations_read",
        "responses": {
          "200": {
            "description": "Integration retrieved.",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "404": {
            "description": "Integration not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Integration unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "users_integrations_update",
        "responses": {
          "200": {
            "description": "Integration updated.",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "description": "Invalid data supplied.",
            "schema": {
              "$ref": "#/definitions/IntegrationError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Integrations unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User name or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IntegrationData",
              "required": [
                "provider"
              ]
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "users_integrations_partial_update",
        "responses": {
          "200": {
            "description": "Integration updated",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "description": "Invalid data supplied",
            "schema": {
              "$ref": "#/definitions/IntegrationError"
            }
          },
          "404": {
            "description": "Integration not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Integration unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IntegrationData"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "users_integrations_delete",
        "responses": {
          "204": {
            "description": "Integration deleted"
          },
          "404": {
            "description": "Integration not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Integration unique identifier expressed as UUID.",
            "type": "string"
          },
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/ssh-key/": {
      "get": {
        "operationId": "users_ssh-key_list",
        "responses": {
          "200": {
            "description": "SSH Key."
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/{namespace}/users/{user_pk}/ssh-key/reset/": {
      "post": {
        "operationId": "users_ssh-key_reset_create",
        "responses": {
          "201": {
            "description": "Reset SSH Key successfully"
          },
          "400": {
            "description": "Invalid data supplied"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "required": true,
            "in": "path",
            "description": "User or team name.",
            "type": "string"
          },
          {
            "name": "user_pk",
            "required": true,
            "in": "path",
            "description": "User unique identifier expressed as UUID.",
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Action unique identifier, expressed as UUID."
        },
        "resource_uri": {
          "type": "string",
          "description": "Resource URI."
        },
        "payload": {
          "type": "object",
          "description": "Object action payload."
        },
        "action": {
          "type": "string",
          "description": "Action name."
        },
        "method": {
          "type": "string",
          "description": "Action method."
        },
        "user": {
          "type": "string",
          "description": "User that action is assigned to."
        },
        "user_agent": {
          "type": "string",
          "description": "User agent that action is related to."
        },
        "start_date": {
          "type": "string",
          "description": "Action dat and time start."
        },
        "end_date": {
          "type": "string",
          "description": "Action needs to end before a certain date and time."
        },
        "state": {
          "type": "string",
          "description": "Action state."
        },
        "ip": {
          "type": "string",
          "description": "IP address that action is related to."
        },
        "object": {
          "type": "string",
          "description": "Action object."
        },
        "is_user_action": {
          "type": "boolean",
          "description": "Is the action related to a user, or not."
        },
        "can_be_cancelled": {
          "type": "boolean",
          "description": "Can action be cancelled, or not."
        },
        "can_be_retried": {
          "type": "boolean",
          "description": "May action be retried, or not."
        },
        "path": {
          "type": "string",
          "description": "Action path."
        },
        "action_name": {
          "type": "string",
          "description": "Action name."
        }
      },
      "required": [
        "action",
        "method",
        "user_agent",
        "state"
      ]
    },
    "AuthToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Unique JWT authorization token."
        }
      }
    },
    "AuthTokenError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "array",
          "description": "Username field errors.",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "array",
          "description": "Password field errors.",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "array",
          "description": "Token field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Card": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Card name."
        },
        "address_line1": {
          "type": "string",
          "description": "Address line 1."
        },
        "address_line2": {
          "type": "string",
          "description": "Address line 2."
        },
        "address_city": {
          "type": "string",
          "description": "Address city."
        },
        "address_state": {
          "type": "string",
          "description": "Address state."
        },
        "address_zip": {
          "type": "string",
          "description": "Address zip code."
        },
        "address_country": {
          "type": "string",
          "description": "Address country."
        },
        "exp_month": {
          "type": "integer",
          "description": "Card expiration month."
        },
        "exp_year": {
          "type": "integer",
          "description": "Card expiration year."
        },
        "token": {
          "type": "string",
          "description": "Card unique token."
        },
        "id": {
          "type": "string",
          "description": "Card unique identifier, expressed as UUID."
        },
        "customer": {
          "type": "string",
          "description": "Card customer."
        },
        "address_line1_check": {
          "type": "string",
          "description": "Address line 1 check, when processing card."
        },
        "address_zip_check": {
          "type": "string",
          "description": "Address check, when processing card."
        },
        "brand": {
          "type": "string",
          "description": "Credit or debit card brand."
        },
        "cvc_check": {
          "type": "string",
          "description": "Security code check."
        },
        "last4": {
          "type": "string",
          "description": "Last four digits of credit or debit card."
        },
        "fingerprint": {
          "type": "string",
          "description": "Card fingerprint."
        },
        "funding": {
          "type": "string",
          "description": "Funding."
        },
        "stripe_id": {
          "type": "string",
          "description": "Unique stripe identifier."
        },
        "created": {
          "type": "string",
          "description": "Card date and time creation."
        }
      }
    },
    "CardData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Card name."
        },
        "address_line1": {
          "type": "string",
          "description": "Address line 1."
        },
        "address_line2": {
          "type": "string",
          "description": "Address line 2."
        },
        "address_city": {
          "type": "string",
          "description": "Address city."
        },
        "address_state": {
          "type": "string",
          "description": "Address state."
        },
        "address_zip": {
          "type": "string",
          "description": "Address zip code."
        },
        "address_country": {
          "type": "string",
          "description": "Address country."
        },
        "exp_month": {
          "type": "integer",
          "description": "Card expiration month."
        },
        "exp_year": {
          "type": "integer",
          "description": "Card expiration year."
        },
        "token": {
          "type": "string",
          "description": "Card unique token."
        }
      }
    },
    "CardError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "name field errors",
          "items": {
            "type": "string"
          }
        },
        "address_line1": {
          "type": "array",
          "description": "address_line1 field errors",
          "items": {
            "type": "string"
          }
        },
        "address_line2": {
          "type": "array",
          "description": "address_line2 field errors",
          "items": {
            "type": "string"
          }
        },
        "address_city": {
          "type": "array",
          "description": "address_city field errors",
          "items": {
            "type": "string"
          }
        },
        "address_state": {
          "type": "array",
          "description": "address_state field errors",
          "items": {
            "type": "string"
          }
        },
        "address_zip": {
          "type": "array",
          "description": "address_zip field errors",
          "items": {
            "type": "string"
          }
        },
        "address_country": {
          "type": "array",
          "description": "address_country field errors",
          "items": {
            "type": "string"
          }
        },
        "exp_month": {
          "type": "array",
          "description": "exp_month field errors",
          "items": {
            "type": "string"
          }
        },
        "exp_year": {
          "type": "array",
          "description": "exp_year field errors",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "array",
          "description": "token field errors",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors",
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "description": "customer field errors",
          "items": {
            "type": "string"
          }
        },
        "address_line1_check": {
          "type": "array",
          "description": "address_line1_check field errors",
          "items": {
            "type": "string"
          }
        },
        "address_zip_check": {
          "type": "array",
          "description": "address_zip_check field errors",
          "items": {
            "type": "string"
          }
        },
        "brand": {
          "type": "array",
          "description": "brand field errors",
          "items": {
            "type": "string"
          }
        },
        "cvc_check": {
          "type": "array",
          "description": "cvc_check field errors",
          "items": {
            "type": "string"
          }
        },
        "last4": {
          "type": "array",
          "description": "last4 field errors",
          "items": {
            "type": "string"
          }
        },
        "fingerprint": {
          "type": "array",
          "description": "fingerprint field errors",
          "items": {
            "type": "string"
          }
        },
        "funding": {
          "type": "array",
          "description": "funding field errors",
          "items": {
            "type": "string"
          }
        },
        "stripe_id": {
          "type": "array",
          "description": "stripe_id field errors",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "array",
          "description": "created field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CardUpdateError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "name field errors",
          "items": {
            "type": "string"
          }
        },
        "address_line1": {
          "type": "array",
          "description": "address_line1 field errors",
          "items": {
            "type": "string"
          }
        },
        "address_line2": {
          "type": "array",
          "description": "address_line2 field errors",
          "items": {
            "type": "string"
          }
        },
        "address_city": {
          "type": "array",
          "description": "address_city field errors",
          "items": {
            "type": "string"
          }
        },
        "address_state": {
          "type": "array",
          "description": "address_state field errors",
          "items": {
            "type": "string"
          }
        },
        "address_zip": {
          "type": "array",
          "description": "address_zip field errors",
          "items": {
            "type": "string"
          }
        },
        "address_country": {
          "type": "array",
          "description": "address_country field errors",
          "items": {
            "type": "string"
          }
        },
        "exp_month": {
          "type": "array",
          "description": "exp_month field errors",
          "items": {
            "type": "string"
          }
        },
        "exp_year": {
          "type": "array",
          "description": "exp_year field errors",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "array",
          "description": "token field errors",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors",
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "description": "customer field errors",
          "items": {
            "type": "string"
          }
        },
        "address_line1_check": {
          "type": "array",
          "description": "address_line1_check field errors",
          "items": {
            "type": "string"
          }
        },
        "address_zip_check": {
          "type": "array",
          "description": "address_zip_check field errors",
          "items": {
            "type": "string"
          }
        },
        "brand": {
          "type": "array",
          "description": "brand field errors",
          "items": {
            "type": "string"
          }
        },
        "cvc_check": {
          "type": "array",
          "description": "cvc_check field errors",
          "items": {
            "type": "string"
          }
        },
        "last4": {
          "type": "array",
          "description": "last4 field errors",
          "items": {
            "type": "string"
          }
        },
        "fingerprint": {
          "type": "array",
          "description": "fingerprint field errors",
          "items": {
            "type": "string"
          }
        },
        "funding": {
          "type": "array",
          "description": "funding field errors",
          "items": {
            "type": "string"
          }
        },
        "stripe_id": {
          "type": "array",
          "description": "stripe_id field errors",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "array",
          "description": "created field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Collaborator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Collaborator unique identifier in UUID format."
        },
        "owner": {
          "type": "boolean",
          "description": "Boolean that states whether collaborator is project owner, or not.\n"
        },
        "joined": {
          "type": "string",
          "description": "Date time of when collaborator joined."
        },
        "username": {
          "type": "string",
          "description": "Collaborator's user name. This must be a valid user name within the\nsystem.\n"
        },
        "email": {
          "type": "string",
          "description": "Collaborator's valid email address."
        },
        "first_name": {
          "type": "string",
          "description": "Collaborator's first name."
        },
        "last_name": {
          "type": "string",
          "description": "Collaborator's last name."
        },
        "permissions": {
          "type": "array",
          "description": "Collaborator permissions. Project creators are assigned owner\npriviledges by default. Permissions are write and read.\n",
          "items": {
            "type": "string"
          },
          "enum": [
            "write_project",
            "read_project"
          ]
        }
      }
    },
    "CollaboratorData": {
      "type": "object",
      "properties": {
        "owner": {
          "description": "Project owner.",
          "type": "boolean"
        },
        "member": {
          "description": "Project member.",
          "type": "string"
        },
        "permissions": {
          "description": "Permissions assigned to collaborator.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "member",
        "permissions"
      ]
    },
    "CollaboratorError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "array",
          "description": "Owner field errors.",
          "items": {
            "type": "string"
          }
        },
        "joined": {
          "type": "array",
          "description": "Joined field errors.",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "array",
          "description": "Username field errors.",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "array",
          "description": "Email field errors.",
          "items": {
            "type": "string"
          }
        },
        "first_name": {
          "type": "array",
          "description": "First name field errors.",
          "items": {
            "type": "string"
          }
        },
        "last_name": {
          "type": "array",
          "description": "Last name field errors.",
          "items": {
            "type": "string"
          }
        },
        "member": {
          "type": "array",
          "description": "Member field errors.",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "type": "array",
          "description": "Permissions field errors.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "member",
        "permissions"
      ]
    },
    "Customer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Customer unique identifier expressed as UUID."
        },
        "stripe_id": {
          "type": "string",
          "description": "Stripe identifier."
        },
        "created": {
          "type": "string",
          "description": "Date and time for customer creation."
        },
        "metadata": {
          "type": "object",
          "description": "Optional customer meta data object."
        },
        "livemode": {
          "type": "boolean",
          "description": "Customer live mode."
        },
        "account_balance": {
          "type": "integer",
          "description": "Customer account balance."
        },
        "currency": {
          "type": "string",
          "description": "Currency used by customer."
        },
        "last_invoice_sync": {
          "type": "string",
          "description": "Date and time for last invoice sync."
        },
        "user": {
          "type": "string",
          "description": "Customer primary user."
        },
        "default_source": {
          "type": "string",
          "description": "Customer default source."
        }
      },
      "required": [
        "user"
      ]
    },
    "CustomerData": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Customer meta data.",
          "type": "object"
        },
        "account_balance": {
          "description": "Account balance.",
          "type": "integer"
        },
        "currency": {
          "description": "Customer preferred currency.",
          "type": "string"
        },
        "last_invoice_sync": {
          "description": "List date and time invoice was synced.",
          "type": "string"
        },
        "user": {
          "description": "User corresponding to customer.",
          "type": "string"
        },
        "default_source": {
          "description": "Default source.",
          "type": "string"
        }
      }
    },
    "CustomerError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors",
          "items": {
            "type": "string"
          }
        },
        "stripe_id": {
          "type": "array",
          "description": "stripe_id field errors",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "array",
          "description": "created field errors",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "array",
          "description": "metadata field errors",
          "items": {
            "type": "string"
          }
        },
        "livemode": {
          "type": "array",
          "description": "livemode field errors",
          "items": {
            "type": "string"
          }
        },
        "account_balance": {
          "type": "array",
          "description": "account_balance field errors",
          "items": {
            "type": "string"
          }
        },
        "currency": {
          "type": "array",
          "description": "currency field errors",
          "items": {
            "type": "string"
          }
        },
        "last_invoice_sync": {
          "type": "array",
          "description": "last_invoice_sync field errors",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "description": "user field errors",
          "items": {
            "type": "string"
          }
        },
        "default_source": {
          "type": "array",
          "description": "default_source field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DockerHost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for docker host as UUID."
        },
        "name": {
          "type": "string",
          "description": "Docker host name."
        },
        "ip": {
          "type": "string",
          "description": "Docker host IPv4 address"
        },
        "port": {
          "type": "integer",
          "description": "Docker host port."
        },
        "status": {
          "type": "string",
          "description": "Docker host status."
        }
      },
      "required": [
        "name",
        "ip"
      ]
    },
    "DockerHostData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "DockerHost name.",
          "type": "string"
        },
        "ip": {
          "description": "DockerHost IPv4 address.",
          "type": "string"
        },
        "port": {
          "description": "DockerHost port.",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "ip"
      ]
    },
    "DockerHostError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "Name field errors.",
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "Ip field errors",
          "items": {
            "type": "string"
          }
        },
        "port": {
          "type": "array",
          "description": "Port field errors.",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "array",
          "description": "Status field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Email address."
        },
        "public": {
          "type": "boolean",
          "description": "Boolean to determine if email is public or private."
        },
        "unsubscribed": {
          "type": "boolean",
          "description": "Boolean to determine whether user is suscribed or unsubscribed to out going email campaigns."
        }
      },
      "required": [
        "address"
      ]
    },
    "EmailData": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Email address.",
          "type": "string"
        },
        "public": {
          "description": "Public or private email address.",
          "type": "boolean"
        },
        "unsubscribed": {
          "description": "Unsubscribed or suscribed.",
          "type": "boolean"
        }
      }
    },
    "EmailError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "address": {
          "type": "array",
          "description": "Address field errors.",
          "items": {
            "type": "string"
          }
        },
        "public": {
          "type": "array",
          "description": "Public field errors.",
          "items": {
            "type": "string"
          }
        },
        "unsubscribed": {
          "type": "array",
          "description": "Unsubscribed field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Environment resource unique identifier."
        },
        "name": {
          "type": "string",
          "description": "Environment resource name."
        },
        "cpu": {
          "type": "integer",
          "description": "CPU availability, equivalent to --cpus=<value>. For example if a host has\n2 CPU's, then a value of 1.5 would be limit the container to using all of the\nfirst CPU and half of the second CPU.\n"
        },
        "memory": {
          "type": "integer",
          "description": "Memory restriction for container."
        },
        "active": {
          "type": "boolean",
          "description": "States whether the environment resource is active, or not."
        }
      },
      "required": [
        "name",
        "cpu",
        "memory"
      ]
    },
    "EnvironmentResourceData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name.",
          "type": "string"
        },
        "cpu": {
          "description": "CPU set for resource.",
          "type": "integer"
        },
        "memory": {
          "description": "Memory set for resource.",
          "type": "integer"
        },
        "active": {
          "description": "Active or not active.",
          "type": "boolean"
        }
      }
    },
    "EnvironmentResourceError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "Name field errors.",
          "items": {
            "type": "string"
          }
        },
        "cpu": {
          "type": "array",
          "description": "CPU field errors.",
          "items": {
            "type": "string"
          }
        },
        "memory": {
          "type": "array",
          "description": "Memory field errors.",
          "items": {
            "type": "string"
          }
        },
        "active": {
          "type": "array",
          "description": "Active field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Integration": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "description": "Name of third party service."
        },
        "extra_data": {
          "type": "string",
          "description": "Extra data necessary for synchronization."
        }
      },
      "required": [
        "provider"
      ]
    },
    "IntegrationData": {
      "type": "object",
      "properties": {
        "provider": {
          "description": "Provider object for integration.",
          "type": "string"
        },
        "extra_data": {
          "description": "Extra data to syncronize.",
          "type": "string"
        }
      }
    },
    "IntegrationError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "provider": {
          "type": "array",
          "description": "Provider field errors.",
          "items": {
            "type": "string"
          }
        },
        "extra_data": {
          "type": "array",
          "description": "Extra data field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Invoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Invoice unique identifier expressed as UUID."
        },
        "stripe_id": {
          "type": "string",
          "description": "Stripe account identifier."
        },
        "created": {
          "type": "string",
          "description": "Date and time when invoice was created."
        },
        "metadata": {
          "type": "object",
          "description": "Optional metadata object of invoice."
        },
        "livemode": {
          "type": "boolean",
          "description": "Boolean that determines whether invoice is live, or not."
        },
        "amount_due": {
          "type": "integer",
          "description": "Amount due set in invoice."
        },
        "application_fee": {
          "type": "integer",
          "description": "Application fee set in invoice."
        },
        "attempt_count": {
          "type": "integer",
          "description": "Number of attempts to deliver invoice."
        },
        "attempted": {
          "type": "boolean",
          "description": "Boolean to determine whether delivery attempt executed, or not."
        },
        "closed": {
          "type": "boolean",
          "description": "Invoice closed, or pending."
        },
        "currency": {
          "type": "string",
          "description": "Currency used in invoice."
        },
        "invoice_date": {
          "type": "string",
          "description": "Invoice issue date."
        },
        "description": {
          "type": "string",
          "description": "Invoice description."
        },
        "next_payment_attempt": {
          "type": "string",
          "description": "Next payment attempt."
        },
        "paid": {
          "type": "boolean",
          "description": "Determines whether invoice has been paid, or not."
        },
        "period_start": {
          "type": "string",
          "description": "Invoice start period."
        },
        "period_end": {
          "type": "string",
          "description": "Invoice end period."
        },
        "reciept_number": {
          "type": "string",
          "description": "Invoice receipt number."
        },
        "starting_balance": {
          "type": "integer",
          "description": "Invoice starting balance."
        },
        "statement_descriptor": {
          "type": "string",
          "description": "Invoice statement descriptor."
        },
        "subtotal": {
          "type": "integer",
          "description": "Invoice sub total."
        },
        "tax": {
          "type": "integer",
          "description": "Tax, if applicable."
        },
        "total": {
          "type": "integer",
          "description": "Invoice total."
        },
        "customer": {
          "type": "string",
          "description": "Customer name."
        },
        "subscription": {
          "type": "string",
          "description": "Suscription name."
        }
      },
      "required": [
        "stripe_id",
        "created",
        "amount_due",
        "currency",
        "invoice_date",
        "period_start",
        "period_end",
        "reciept_number",
        "starting_balance",
        "subtotal",
        "total",
        "customer"
      ]
    },
    "JWT": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Unique JSON Web Token (JWT)."
        }
      }
    },
    "JWTData": {
      "type": "object",
      "properties": {
        "username": {
          "description": "User name.",
          "type": "string"
        },
        "password": {
          "description": "User password.",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "JWTError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "array",
          "description": "username field errors",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "array",
          "description": "password field errors",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "array",
          "description": "token field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NotFound": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "string",
          "description": "Requested item not found."
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Plan unique identifier as UUID."
        },
        "stripe_id": {
          "type": "string",
          "description": "Stripe identifier to identify entity charging for plans."
        },
        "created": {
          "type": "string",
          "description": "Date and time when plan was created."
        },
        "metadata": {
          "type": "object",
          "description": "Optional meta data object."
        },
        "livemode": {
          "type": "boolean",
          "description": "Boolean to determine whether plan is live, or not."
        },
        "amount": {
          "type": "integer",
          "description": "Amount (cost/price) of plan."
        },
        "currency": {
          "type": "string",
          "description": "Currency used to specify amount."
        },
        "interval": {
          "type": "string",
          "description": "Interval for plan, such as montly or yearly."
        },
        "interval_count": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "Plan name."
        },
        "statement_descriptor": {
          "type": "string",
          "description": "Statement that describes plan to users."
        },
        "trial_period_days": {
          "type": "integer",
          "description": "Number of days for plan trial, used for try and buy campaigns."
        }
      },
      "required": [
        "amount",
        "interval",
        "interval_count",
        "name"
      ]
    },
    "PlanData": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Plan meta data.",
          "type": "object"
        },
        "livemode": {
          "description": "Is plan live, or not.",
          "type": "boolean"
        },
        "amount": {
          "description": "Plan amount in currency.",
          "type": "integer"
        },
        "currency": {
          "description": "Currency for plan.",
          "type": "string"
        },
        "interval": {
          "description": "Plan interval.",
          "type": "string"
        },
        "interval_count": {
          "description": "Number of intervals.",
          "type": "integer"
        },
        "name": {
          "description": "Plan name.",
          "type": "string"
        },
        "statement_descriptor": {
          "description": "Plan description.",
          "type": "string"
        },
        "trial_period_days": {
          "description": "Trial days for try and buy campaigns.",
          "type": "integer"
        }
      }
    },
    "PlanError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors",
          "items": {
            "type": "string"
          }
        },
        "stripe_id": {
          "type": "array",
          "description": "stripe_id field errors",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "array",
          "description": "created field errors",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "array",
          "description": "metadata field errors",
          "items": {
            "type": "string"
          }
        },
        "livemode": {
          "type": "array",
          "description": "livemode field errors",
          "items": {
            "type": "string"
          }
        },
        "amount": {
          "type": "array",
          "description": "amount field errors",
          "items": {
            "type": "string"
          }
        },
        "currency": {
          "type": "array",
          "description": "currency field errors",
          "items": {
            "type": "string"
          }
        },
        "interval": {
          "type": "array",
          "description": "interval field errors",
          "items": {
            "type": "string"
          }
        },
        "interval_count": {
          "type": "array",
          "description": "interval_count field errors",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "name field errors",
          "items": {
            "type": "string"
          }
        },
        "statement_descriptor": {
          "type": "array",
          "description": "statement_descriptor field errors",
          "items": {
            "type": "string"
          }
        },
        "trial_period_days": {
          "type": "array",
          "description": "trial period days field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for project as UUID."
        },
        "name": {
          "type": "string",
          "description": "Project name."
        },
        "description": {
          "type": "string",
          "description": "Project description."
        },
        "private": {
          "type": "boolean",
          "description": "Value that states whether project is private or public."
        },
        "last_updated": {
          "type": "string",
          "description": "Date and time when project was last updated."
        },
        "owner": {
          "type": "string",
          "description": "Username of project owner."
        },
        "collaborators": {
          "type": "array",
          "description": "Array of project collaborators.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "ProjectData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Project name.",
          "type": "string"
        },
        "description": {
          "description": "Project description.",
          "type": "string"
        },
        "private": {
          "description": "Private project true, otherwise public.",
          "type": "boolean"
        },
        "collaborators": {
          "description": "Array (list) of project collaborators.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "Name field errors.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "array",
          "description": "Description field errors.",
          "items": {
            "type": "string"
          }
        },
        "private": {
          "type": "array",
          "description": "Private field errors.",
          "items": {
            "type": "string"
          }
        },
        "last_updated": {
          "type": "array",
          "description": "Last_updated field errors.",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "array",
          "description": "Owner field errors.",
          "items": {
            "type": "string"
          }
        },
        "collaborators": {
          "type": "array",
          "description": "Collaborators field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "File unique identifier in UUID format."
        },
        "project": {
          "type": "string",
          "description": "Project name where file is located."
        },
        "file": {
          "type": "string",
          "description": "Complete file endpoint as URL."
        },
        "public": {
          "type": "boolean",
          "description": "Public or private file."
        },
        "base64_data": {
          "type": "string",
          "description": "Data sent as string, in base64 format."
        },
        "name": {
          "type": "string",
          "description": "File name and extension."
        }
      },
      "required": [
        "project",
        "file"
      ]
    },
    "ProjectFileError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "type": "array",
          "description": "project field errors",
          "items": {
            "type": "string"
          }
        },
        "file": {
          "type": "array",
          "description": "file field errors",
          "items": {
            "type": "string"
          }
        },
        "public": {
          "type": "array",
          "description": "public field errors",
          "items": {
            "type": "string"
          }
        },
        "base64_data": {
          "type": "array",
          "description": "base64_data field errors",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "name field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RefreshJSONWebToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Refresh JWT token."
        }
      },
      "required": [
        "token"
      ]
    },
    "RefreshJSONWebTokenData": {
      "type": "object",
      "properties": {
        "token": {
          "description": "Refreshed token.",
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "RefreshJSONWebTokenError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "array",
          "description": "Token field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Search": {
      "type": "object",
      "properties": {}
    },
    "Server": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Server unique identifier in UUID format."
        },
        "name": {
          "type": "string",
          "description": "Server name."
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when server was created."
        },
        "image_name": {
          "type": "string",
          "description": "Server image source, such as 3blades/tensorflow-notebook.\n"
        },
        "environment_resources": {
          "type": "string",
          "description": "Environment resources used by server when launched."
        },
        "startup_script": {
          "type": "string",
          "description": "Optional startup script to use when launching server."
        },
        "config": {
          "type": "object",
          "description": "Server configuration option. Values are jupyter, restful and cron."
        },
        "status": {
          "type": "string",
          "description": "Server status, such as Running or Stopped."
        },
        "connected": {
          "type": "array",
          "description": "Array that represents what other servers the server is connected to.",
          "items": {
            "type": "string"
          }
        },
        "host": {
          "type": "string",
          "description": "Value that represents user defined host, otherwise known as BYON (Bring Your Own Node).\n"
        },
        "endpoint": {
          "type": "string",
          "description": "Server endpoint path."
        },
        "logs_url": {
          "type": "string",
          "description": "URL that streams stdout and stderr logs of server."
        },
        "status_url": {
          "type": "string",
          "description": "URL that confirms server status."
        }
      },
      "required": [
        "name"
      ]
    },
    "ServerData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Server name.",
          "type": "string"
        },
        "image_name": {
          "description": "Image name.",
          "type": "string"
        },
        "environment_resources": {
          "description": "Environment resources name.",
          "type": "string"
        },
        "startup_script": {
          "description": "Startup script to run when launching server.",
          "type": "string"
        },
        "config": {
          "description": "Configuration options when launching server.",
          "type": "object"
        },
        "connected": {
          "description": "Array of other servers the server is connected to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "host": {
          "description": "External host IPv4 address or hostname.",
          "type": "string"
        }
      }
    },
    "ServerError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "name field errors.",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "array",
          "description": "created_at field errors.",
          "items": {
            "type": "string"
          }
        },
        "image_name": {
          "type": "array",
          "description": "image_name field errors.",
          "items": {
            "type": "string"
          }
        },
        "environment_resources": {
          "type": "array",
          "description": "environment_resources field errors.",
          "items": {
            "type": "string"
          }
        },
        "startup_script": {
          "type": "array",
          "description": "startup_script field errors.",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "type": "array",
          "description": "config field errors.",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "array",
          "description": "status field errors.",
          "items": {
            "type": "string"
          }
        },
        "connected": {
          "type": "array",
          "description": "connected field errors.",
          "items": {
            "type": "string"
          }
        },
        "host": {
          "type": "array",
          "description": "host field errors.",
          "items": {
            "type": "string"
          }
        },
        "endpoint": {
          "type": "array",
          "description": "endpoint field errors.",
          "items": {
            "type": "string"
          }
        },
        "logs_url": {
          "type": "array",
          "description": "logs_url field errors.",
          "items": {
            "type": "string"
          }
        },
        "status_url": {
          "type": "array",
          "description": "status_url field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServerAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Server action unique identifier."
        },
        "name": {
          "type": "string",
          "description": "Name for server action."
        },
        "operation": {
          "type": "string",
          "description": "Operation of server action."
        }
      }
    },
    "ServerActionData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Server action name.",
          "type": "string"
        },
        "operation": {
          "description": "Server operation.",
          "type": "string"
        }
      }
    },
    "ServerActionError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "Name field errors.",
          "items": {
            "type": "string"
          }
        },
        "operation": {
          "type": "array",
          "description": "Operation field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServerRunStatistics": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Server run statistics object unique identifier in UUID format."
        },
        "start": {
          "type": "string",
          "description": "Date and time that represents when server started."
        },
        "stop": {
          "type": "string",
          "description": "Date and time that represents when server stopped."
        },
        "exit_code": {
          "type": "integer",
          "description": "Exit code, such as Exit 0 or Exit 1."
        },
        "size": {
          "type": "integer",
          "description": "Size of server."
        },
        "stacktrace": {
          "type": "string",
          "description": "Stacktrace, if there was one."
        }
      }
    },
    "ServerRunStatisticsData": {
      "type": "object",
      "properties": {
        "start": {
          "description": "Server start.",
          "type": "string"
        },
        "stop": {
          "description": "Server stop.",
          "type": "string"
        },
        "exit_code": {
          "description": "Server exit code.",
          "type": "integer"
        },
        "size": {
          "description": "Server size.",
          "type": "integer"
        },
        "stacktrace": {
          "description": "Server stacktrace.",
          "type": "string"
        }
      }
    },
    "ServerRunStatisticsError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors.",
          "items": {
            "type": "string"
          }
        },
        "start": {
          "type": "array",
          "description": "start field errors.",
          "items": {
            "type": "string"
          }
        },
        "stop": {
          "type": "array",
          "description": "stop field errors.",
          "items": {
            "type": "string"
          }
        },
        "exit_code": {
          "type": "array",
          "description": "exit_code field errors.",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "type": "array",
          "description": "size field errors.",
          "items": {
            "type": "string"
          }
        },
        "stacktrace": {
          "type": "array",
          "description": "stacktrace field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServerStatistics": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Server statistics unique identifier in UUID format."
        },
        "start": {
          "type": "string",
          "description": "Start statistics, such as start time and date."
        },
        "stop": {
          "type": "string",
          "description": "Stop statistics, such as stop time and date."
        },
        "size": {
          "type": "integer",
          "description": "Size of statistics."
        }
      }
    },
    "ServerStatisticsData": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors.",
          "items": {
            "type": "string"
          }
        },
        "start": {
          "type": "array",
          "description": "start field errors.",
          "items": {
            "type": "string"
          }
        },
        "stop": {
          "type": "array",
          "description": "stop field errors.",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "type": "array",
          "description": "size field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServerStatisticsError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "start": {
          "type": "array",
          "description": "Start field errors.",
          "items": {
            "type": "string"
          }
        },
        "stop": {
          "type": "array",
          "description": "Stop field errors.",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "type": "array",
          "description": "Size field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SshTunnel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "SSH tunnel unique identifier in UUID format."
        },
        "name": {
          "type": "string",
          "description": "SSH tunnel name."
        },
        "host": {
          "type": "string",
          "description": "Host, usually IPv4, for SSH tunnel."
        },
        "local_port": {
          "type": "integer",
          "description": "Local source port for SSH tunnel."
        },
        "remote_port": {
          "type": "integer",
          "description": "Remote port to establish SSH tunnel."
        },
        "endpoint": {
          "type": "string",
          "description": "SSH tunnel destination endpoint."
        },
        "username": {
          "type": "string",
          "description": "SSH tunnel user name."
        }
      },
      "required": [
        "name",
        "host",
        "local_port",
        "remote_port",
        "endpoint",
        "username"
      ]
    },
    "SshTunnelData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "SSH tunnel name.",
          "type": "string"
        },
        "host": {
          "description": "SSH tunnel host.",
          "type": "string"
        },
        "local_port": {
          "description": "SSH tunnel local port.",
          "type": "integer"
        },
        "remote_port": {
          "description": "SSH tunnel remote port.",
          "type": "integer"
        },
        "endpoint": {
          "description": "SSH tunnel endpoint.",
          "type": "string"
        },
        "username": {
          "description": "User name to establish SSH tunnel.",
          "type": "string"
        }
      }
    },
    "SshTunnelError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "description": "name field errors.",
          "items": {
            "type": "string"
          }
        },
        "host": {
          "type": "array",
          "description": "host field errors.",
          "items": {
            "type": "string"
          }
        },
        "local_port": {
          "type": "array",
          "description": "local_port field errors.",
          "items": {
            "type": "string"
          }
        },
        "remote_port": {
          "type": "array",
          "description": "remote_port field errors.",
          "items": {
            "type": "string"
          }
        },
        "endpoint": {
          "type": "array",
          "description": "endpoint field errors.",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "array",
          "description": "username field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for suscription as UUID."
        },
        "plan": {
          "type": "string",
          "description": "Plan name."
        },
        "stripe_id": {
          "type": "string",
          "description": "Stripe (payment processor) identifier."
        },
        "created": {
          "type": "string",
          "description": "Date and time suscription was created."
        },
        "livemode": {
          "type": "boolean",
          "description": "Suscription live, or not."
        },
        "application_fee_percent": {
          "type": "number",
          "description": "Application fee percent."
        },
        "cancel_at_period_end": {
          "type": "boolean",
          "description": "Boolean value to determine whether plan cancels at the end of the period, or not."
        },
        "canceled_at": {
          "type": "string",
          "description": "Date and time when plan was cancelled."
        },
        "current_period_start": {
          "type": "string",
          "description": "Current suscription plan start date."
        },
        "current_period_end": {
          "type": "string",
          "description": "Current suscription plan end date."
        },
        "start": {
          "type": "string",
          "description": "Date and time for when plan started."
        },
        "ended_at": {
          "type": "string",
          "description": "Date and time for when plan ended."
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity purchased as integer."
        },
        "status": {
          "type": "string",
          "description": "Suscription status."
        },
        "trial_start": {
          "type": "string",
          "description": "Date and time for trial start."
        },
        "trial_end": {
          "type": "string",
          "description": "Date and time for trial end."
        }
      },
      "required": [
        "plan"
      ]
    },
    "SubscriptionError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors",
          "items": {
            "type": "string"
          }
        },
        "plan": {
          "type": "array",
          "description": "plan field errors",
          "items": {
            "type": "string"
          }
        },
        "stripe_id": {
          "type": "array",
          "description": "stripe_id field errors",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "array",
          "description": "created field errors",
          "items": {
            "type": "string"
          }
        },
        "livemode": {
          "type": "array",
          "description": "livemode field errors",
          "items": {
            "type": "string"
          }
        },
        "application_fee_percent": {
          "type": "array",
          "description": "application_fee_percent field errors",
          "items": {
            "type": "string"
          }
        },
        "cancel_at_period_end": {
          "type": "array",
          "description": "cancel_at_period_end field errors",
          "items": {
            "type": "string"
          }
        },
        "canceled_at": {
          "type": "array",
          "description": "canceled_at field errors",
          "items": {
            "type": "string"
          }
        },
        "current_period_start": {
          "type": "array",
          "description": "current_period_start field errors",
          "items": {
            "type": "string"
          }
        },
        "current_period_end": {
          "type": "array",
          "description": "current_period_end field errors",
          "items": {
            "type": "string"
          }
        },
        "start": {
          "type": "array",
          "description": "start field errors",
          "items": {
            "type": "string"
          }
        },
        "ended_at": {
          "type": "array",
          "description": "ended_at field errors",
          "items": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "array",
          "description": "quantity field errors",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "array",
          "description": "status field errors",
          "items": {
            "type": "string"
          }
        },
        "trial_start": {
          "type": "array",
          "description": "trial_start field errors",
          "items": {
            "type": "string"
          }
        },
        "trial_end": {
          "type": "array",
          "description": "trial_end field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SubscriptionData": {
      "type": "object",
      "properties": {
        "plan": {
          "description": "Subscription plan.",
          "type": "string"
        }
      }
    },
    "SyncedResource": {
      "type": "object",
      "properties": {
        "folder": {
          "type": "string",
          "description": "Folder for synced resource destination/source."
        },
        "settings": {
          "type": "object",
          "description": "Object that represents settings for synced resources."
        },
        "provider": {
          "type": "string",
          "description": "Name of provider that resource is synced with."
        }
      },
      "required": [
        "folder",
        "provider"
      ]
    },
    "SyncedResourceData": {
      "type": "object",
      "properties": {
        "folder": {
          "description": "Folder to sync.",
          "type": "string"
        },
        "settings": {
          "description": "Sync settins.",
          "type": "object"
        },
        "provider": {
          "description": "Provider name.",
          "type": "string"
        }
      }
    },
    "SyncedResourceError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field",
          "items": {
            "type": "string"
          }
        },
        "folder": {
          "type": "array",
          "description": "folder field errors",
          "items": {
            "type": "string"
          }
        },
        "settings": {
          "type": "array",
          "description": "settings field errors",
          "items": {
            "type": "string"
          }
        },
        "provider": {
          "type": "array",
          "description": "provider field errors",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Trigger": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Trigger unique identifier in UUID format."
        },
        "cause": {
          "type": "object",
          "description": "Object that represents the cause for trigger."
        },
        "effect": {
          "type": "object",
          "description": "Object that represents effect for trigger. "
        },
        "schedule": {
          "type": "string",
          "description": "Schedule to create triggers, otherwise know as cron schedule."
        },
        "webhook": {
          "type": "object",
          "description": "Object that represents webhook for trigger."
        }
      }
    },
    "TriggerAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Trigger action that represents unique identifier in UUID format."
        },
        "payload": {
          "type": "object",
          "description": "Object that represents trigger action payload."
        },
        "method": {
          "type": "string",
          "description": "Method for trigger action, such as POST."
        },
        "model": {
          "type": "string",
          "description": "Trigger action model."
        },
        "object_id": {
          "type": "string",
          "description": "Object ID Unique identifer in UUID format."
        },
        "action_name": {
          "type": "string",
          "description": "Name for trigger action."
        }
      },
      "required": [
        "method",
        "action_name"
      ]
    },
    "TriggerData": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/TriggerAction"
        },
        "effect": {
          "$ref": "#/definitions/TriggerAction"
        },
        "schedule": {
          "description": "Cron schedule",
          "type": "string"
        },
        "webhook": {
          "$ref": "#/definitions/Webhook"
        }
      }
    },
    "TriggerError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.'",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "Id field errors.",
          "items": {
            "type": "string"
          }
        },
        "cause": {
          "type": "object",
          "properties": {
            "non_field_errors": {
              "type": "array",
              "description": "Errors not connected to any field.",
              "items": {
                "type": "string"
              }
            },
            "id": {
              "type": "array",
              "description": "Id field errors.",
              "items": {
                "type": "string"
              }
            },
            "payload": {
              "type": "array",
              "description": "Payload field errors.",
              "items": {
                "type": "string"
              }
            },
            "method": {
              "type": "array",
              "description": "Method field errors.",
              "items": {
                "type": "string"
              }
            },
            "model": {
              "type": "array",
              "description": "Model field errors.",
              "items": {
                "type": "string"
              }
            },
            "object_id": {
              "type": "array",
              "description": "Object_id field errors.",
              "items": {
                "type": "string"
              }
            },
            "action_name": {
              "type": "array",
              "description": "Action_name field errors.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "effect": {
          "type": "object",
          "properties": {
            "non_field_errors": {
              "type": "array",
              "description": "Errors not connected to any field.",
              "items": {
                "type": "string"
              }
            },
            "id": {
              "type": "array",
              "description": "Id field errors.",
              "items": {
                "type": "string"
              }
            },
            "payload": {
              "type": "array",
              "description": "Payload field errors.",
              "items": {
                "type": "string"
              }
            },
            "method": {
              "type": "array",
              "description": "Method field errors.",
              "items": {
                "type": "string"
              }
            },
            "model": {
              "type": "array",
              "description": "Model field errors.",
              "items": {
                "type": "string"
              }
            },
            "object_id": {
              "type": "array",
              "description": "Object_id field errors.",
              "items": {
                "type": "string"
              }
            },
            "action_name": {
              "type": "array",
              "description": "Action_name field errors.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "schedule": {
          "type": "array",
          "description": "schedule field errors",
          "items": {
            "type": "string"
          }
        },
        "webhook": {
          "type": "object",
          "properties": {
            "non_field_errors": {
              "type": "array",
              "description": "Errors not connected to any field",
              "items": {
                "type": "string"
              }
            },
            "url": {
              "type": "array",
              "description": "url field errors",
              "items": {
                "type": "string"
              }
            },
            "config": {
              "type": "array",
              "description": "config field errors",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "avatar_url": {
          "type": "string",
          "description": "URL where user's avatar is located."
        },
        "bio": {
          "type": "string",
          "description": "Description of user's biography."
        },
        "url": {
          "type": "string",
          "description": "Users's personal website."
        },
        "location": {
          "type": "string",
          "description": "User location."
        },
        "company": {
          "type": "string",
          "description": "User's company."
        },
        "timezone": {
          "type": "string",
          "description": "User's time zone."
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User unique identifier, expressed as UUID."
        },
        "username": {
          "type": "string",
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
        },
        "email": {
          "type": "string",
          "description": "User email address."
        },
        "first_name": {
          "type": "string",
          "description": "User first name."
        },
        "last_name": {
          "type": "string",
          "description": "User last name."
        },
        "profile": {
          "type": "object",
          "description": "User profile information."
        }
      },
      "required": [
        "username",
        "profile"
      ]
    },
    "UserData": {
      "type": "object",
      "properties": {
        "username": {
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type": "string"
        },
        "email": {
          "description": "User email.",
          "type": "string"
        },
        "first_name": {
          "description": "User first name.",
          "type": "string"
        },
        "last_name": {
          "description": "User last name.",
          "type": "string"
        },
        "password": {
          "description": "User password.",
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/UserProfile"
        }
      }
    },
    "UserError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "description": "id field errors.",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "array",
          "description": "Username field errors.",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "array",
          "description": "Email field errors.",
          "items": {
            "type": "string"
          }
        },
        "first_name": {
          "type": "array",
          "description": "First name field errors.",
          "items": {
            "type": "string"
          }
        },
        "last_name": {
          "type": "array",
          "description": "Last name field errors.",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "array",
          "description": "Password field errors.",
          "items": {
            "type": "string"
          }
        },
        "profile": {
          "type": "object",
          "properties": {
            "non_field_errors": {
              "type": "array",
              "description": "Errors not connected to any field.",
              "items": {
                "type": "string"
              }
            },
            "avatar_url": {
              "type": "array",
              "description": "Avatar field errors.",
              "items": {
                "type": "string"
              }
            },
            "bio": {
              "type": "array",
              "description": "Bio field errors.",
              "items": {
                "type": "string"
              }
            },
            "url": {
              "type": "array",
              "description": "URL field errors.",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "type": "array",
              "description": "Location field errors.",
              "items": {
                "type": "string"
              }
            },
            "company": {
              "type": "array",
              "description": "Company field errors.",
              "items": {
                "type": "string"
              }
            },
            "timezone": {
              "type": "array",
              "description": "Timezone field errors.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "VerifyJSONWebToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Varify JWT token."
        }
      },
      "required": [
        "token"
      ]
    },
    "VerifyJSONWebTokenData": {
      "type": "object",
      "properties": {
        "token": {
          "description": "JSON Web Token (JWT).",
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "VerifyJSONWebTokenError": {
      "type": "object",
      "properties": {
        "non_field_errors": {
          "type": "array",
          "description": "Errors not connected to any field.",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "array",
          "description": "Token field errors.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Webhook": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL for webhook."
        },
        "config": {
          "type": "object",
          "description": "Object that represents configuration options for webhook."
        }
      },
      "required": [
        "url"
      ]
    }
  }
}